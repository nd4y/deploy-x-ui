- name: Deploy x-ui server
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Install packages
      ansible.builtin.apt:
        name:
          - zip
          - sqlite3
        update_cache: true
        state: present

    - name: Install docker
      ansible.builtin.apt:
        name:
          - docker.io
          - docker-compose
        update_cache: false
        state: present
      when: install_docker

    - name: Cleanup {{ install_dir }}
      ansible.builtin.file:
        path: "{{ install_dir }}"
        state: absent

    - name: Recreate {{ install_dir }}
      ansible.builtin.file:
        group: "{{ hostvars[inventory_hostname].ansible_ssh_user }}"
        owner: "{{ hostvars[inventory_hostname].ansible_ssh_user }}"
        mode: "a=rX,u=rwX"
        path: "{{ install_dir }}"
        state: directory

    - name: Deploy docker-compose.yml
      ansible.builtin.template:
        owner: "{{ hostvars[inventory_hostname].ansible_ssh_user }}"
        group: "{{ hostvars[inventory_hostname].ansible_ssh_user }}"
        mode: "0644"
        remote_src: false
        src: "{{ local_templates_dir }}/config/docker-compose.yml.j2"
        dest: "{{ install_dir }}/docker-compose.yml"

    - name: Create systemd service
      ansible.builtin.template:
        owner: 'root'
        group: 'root'
        mode: "0644"
        remote_src: false
        src: "{{ local_templates_dir }}/systemd/unit.service.j2"
        dest: "/etc/systemd/system/{{ systemd_service_name }}.service"

    - name: Start service
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: false
        name: "{{ systemd_service_name }}"

    - name: Create private key
      community.crypto.openssl_privatekey:
        path: "{{ install_dir }}/cert/tls.key.pem"

    - name: Create self-signed certificate
      community.crypto.x509_certificate:
        path: "{{ install_dir }}/cert/tls.crt.pem"
        privatekey_path: "{{ install_dir }}/cert/tls.key.pem"
        provider: selfsigned

    - name: Configure X-UI TLS Certificate
      ansible.builtin.shell:
        chdir: "{{ install_dir }}/db"
        cmd: sqlite3 x-ui.db "INSERT INTO settings (id, 'key', value) VALUES(5, 'webCertFile', '/root/cert/tls.crt.pem');"

    - name: Configure X-UI TLS Key
      ansible.builtin.shell:
        chdir: "{{ install_dir }}/db"
        cmd: sqlite3 x-ui.db "INSERT INTO settings (id, 'key', value) VALUES(6, 'webKeyFile', '/root/cert/tls.key.pem');"

    - name: Configure X-UI Web-Interface port
      ansible.builtin.shell:
        chdir: "{{ install_dir }}/db"
        cmd: sqlite3 x-ui.db "INSERT INTO settings (id, 'key', value) VALUES(4, 'webPort', '{{ web_interface_port }}');"

    - name: Configure X-UI Web-Interface credentials
      ansible.builtin.shell:
        chdir: "{{ install_dir }}/db"
        cmd: sqlite3 x-ui.db "UPDATE users SET username='{{ web_interface_username }}', password='{{ web_interface_password }}' WHERE id=1;"

    - name: Restart service and add to autostart
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: "{{ systemd_service_name }}"

    - name: Print URL and credentials
      ansible.builtin.debug:
        msg: "Web-Interface: https://{{ hostvars[inventory_hostname].ansible_host }}:{{ web_interface_port }} Login: {{ web_interface_username }} Password: {{ web_interface_password }}" 
        verbosity: 0
